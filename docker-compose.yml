# Use the file format compatible with Docker Compose 3.8
version: "3.8"

# Each thing that Docker Compose runs is referred to as
# a "service". In our case, our Rails application is one
# service ("web") and our PostgreSQL database instance
# is another service ("database").
services:
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: sweater_weather #DockerHub postgres docs state this is optional but must be used when password is set.  It will also create a db under the supplied username which you'll use to connect to in rails console such as: $docker-compose exec postgres psql -U YourUserNameHere
      POSTGRES_PASSWORD: 'whateverPWYouWant'
    volumes:
      - postgres:/var/lib/postgresql/data 
  web:
    # The root directory from which we're building.
    build: .
    image: yitwix/sweater_weather_web:latest
    links:
      - postgres
    volumes:
      - postgres:/var/lib/postgresql/data 

    # The command to be run when we run "docker-compose up".
    command: bash -c "rm -f tmp/pids/server.pid && bundle exec rails s -p 3001 -b '0.0.0.0'"

    # Expose port 3000.
    ports:
      - "3001:3001"
    env_file:
      - sweater_weather.env
    depends_on:
      - postgres

    # Specify the values of the environment variables
    # used in this container.
    environment:
      RAILS_ENV: development
      DATABASE_NAME: sweater_weather_development
      DATABASE_USER: sweater_weather_development
      DATABASE_PASSWORD: 'whateverPWYouWant'
      DATABASE_HOST: postgres

# Declare the volumes that our application uses.
volumes:
  postgres: 